1) Яка різниця між var, let та const при оголошенні змінних в JavaScript?

var: функціональна/глобальна область видимості, підняття, можна перевизначати та оновлювати.
let: блочна область видимості, підняття, можна оновлювати, але не перевизначати.
const: блочна область видимості, підняття, не можна ні перевизначати, ні оновлювати.

Підняття — це механізм JavaScript, за допомогою якого оголошення змінних та функцій “піднімаються” на початок своєї області видимості під час виконання коду. Це означає, що ви можете використовувати змінну або функцію до їх фактичного оголошення в коді.

Приклад з var:
console.log(greeter); // undefined
var greeter = "hello";

Ініціалізація — це процес присвоєння значення змінній. У випадку з var, ініціалізація відбувається в тому місці, де змінній присвоюється значення.

Чому підняття корисне?
Підняття може бути корисним для функцій, оскільки дозволяє викликати функцію до її оголошення:

sayHello();

function sayHello() {
  console.log("Hello!");
}

У цьому прикладі функція sayHello піднімається на початок області видимості, тому її можна викликати до фактичного оголошення.

Для змінних підняття може бути джерелом помилок і непередбачуваної поведінки, тому рекомендується використовувати let та const, які мають блочну область видимості і не дозволяють доступ до змінної до її оголошення.


Оголошення змінної або функції — це процес, при якому ми повідомляємо компілятору про існування змінної або функції, але не обов’язково присвоюємо їй значення. Приклад:
var greeter; // оголошення змінної


Ініціалізація — це процес присвоєння початкового значення змінній під час її оголошення. Для функцій це може бути визначення тіла функції:

var greeter = "hello"; // оголошення та ініціалізація змінної
function sayHello() {
  console.log("Hello!");
} // оголошення та ініціалізація функції

Виклик (Invocation) — це процес виконання функції або використання змінної. Для функцій це означає запуск коду, що міститься в тілі функції.

sayHello(); // виклик функції
console.log(greeter); // використання змінної

**************************
**************************
**************************
**************************
**************************
**************************

2) Які примітивні типи даних існують в JavaScript?

У JavaScript існує сім примітивних типів даних:

String (рядок) - для текстових даних.
Number (число) - для чисел, включаючи цілі та числа з плаваючою комою.
BigInt - для представлення цілих чисел довільної довжини.
Boolean (логічний тип) - для значень true або false.
Undefined - для змінних, які були оголошені, але не мають значення.
Null - для відсутності значення.
Symbol - для унікальних ідентифікаторів.


**************************
**************************
**************************
**************************
**************************
**************************

3) Як створити масив та як отримати доступ до його елементів?
У JavaScript масиви створюються за допомогою квадратних дужок або конструктора Array:

// Створення порожнього масиву
let arr = [];
let arr2 = new Array();

// Створення масиву з початковими елементами
let fruits = ["Яблуко", "Апельсин", "Слива"];

Доступ до елементів масиву здійснюється за індексом, починаючи з нуля:


console.log(fruits[0]); // Яблуко
console.log(fruits[1]); // Апельсин
console.log(fruits[2]); // Слива



**************************
**************************
**************************
**************************
**************************
**************************

4) Поясни, що таке контекст виконання (execution context) в JavaScript.

Контекст виконання (execution context) в JavaScript — це середовище, в якому виконується код. Він визначає, які змінні, об’єкти та функції доступні в певний момент часу під час виконання коду.

Типи контекстів виконання

1 - Глобальний контекст виконання:

Це базовий контекст, який створюється при завантаженні скрипта.
У браузері глобальний контекст пов’язаний з об’єктом window, а в Node.js — з об’єктом global.
У глобальному контексті ключове слово this вказує на глобальний об’єкт.

2 - Контекст виконання функції:

Кожного разу, коли викликається функція, створюється новий контекст виконання.
Цей контекст включає в себе локальні змінні, об’єкти та значення this, специфічні для цієї функції.

3 - Контекст виконання функції eval:

Код, виконаний всередині функції eval, також має свій власний контекст виконання1.

Стек виконання (call stack) — це структура даних типу LIFO (Last In, First Out), яка використовується для зберігання контекстів виконання. Коли викликається функція, її контекст додається на вершину стека. Після завершення виконання функції її контекст видаляється зі стека, і управління повертається до попереднього контексту1.





